/**
 * uri-scheme.js
 */

/* shared */
import { isString } from './common.js';

/**
 * uri schemes
 *
 * @see {@link https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml}
 *      - Historical schemes omitted
 *      - Added 'moz-extension' scheme
 */
const uriSchemes = [
  'aaa',
  'aaas',
  'about',
  'acap',
  'acct',
  'acd',
  'acr',
  'adiumxtra',
  'adt',
  'afp',
  'afs',
  'aim',
  'amss',
  'android',
  'appdata',
  'apt',
  'ar',
  'ark',
  'attachment',
  'aw',
  'barion',
  'beshare',
  'bitcoin',
  'bitcoincash',
  'blob',
  'bolo',
  'browserext',
  'cabal',
  'calculator',
  'callto',
  'cap',
  'cast',
  'casts',
  'chrome',
  'chrome-extension',
  'cid',
  'coap',
  'coaps',
  'com-eventbrite-attendee',
  'content',
  'content-type',
  'crid',
  'cstr',
  'cvs',
  'dab',
  'dat',
  'data',
  'dav',
  'diaspora',
  'dict',
  'did',
  'dis',
  'dlna-playcontainer',
  'dlna-playsingle',
  'dns',
  'dntp',
  'doi',
  'dpp',
  'drm',
  'drop',
  'dtmi',
  'dtn',
  'dvb',
  'dvx',
  'dweb',
  'ed2k',
  'elsi',
  'embedded',
  'ens',
  'ethereum',
  'example',
  'facetime',
  'feed',
  'feedready',
  'fido',
  'file',
  'finger',
  'first-run-pen-experience',
  'fish',
  'fm',
  'ftp',
  'fuchsia-pkg',
  'geo',
  'gg',
  'git',
  'gitoid',
  'gizmoproject',
  'go',
  'gopher',
  'graph',
  'gtalk',
  'h323',
  'ham',
  'hcap',
  'hcp',
  'http',
  'https',
  'hxxp',
  'hxxps',
  'hydrazone',
  'hyper',
  'iax',
  'icap',
  'icon',
  'im',
  'imap',
  'info',
  'iotdisco',
  'ipfs',
  'ipn',
  'ipns',
  'ipp',
  'ipps',
  'irc',
  'irc6',
  'ircs',
  'iris',
  'iris.beep',
  'iris.lwz',
  'iris.xpc',
  'iris.xpcs',
  'isostore',
  'itms',
  'jabber',
  'jar',
  'jms',
  'keyparc',
  'lastfm',
  'lbry',
  'ldap',
  'ldaps',
  'leaptofrogans',
  'lorawan',
  'lvlt',
  'magnet',
  'mailto',
  'maps',
  'market',
  'matrix',
  'message',
  'microsoft.windows.camera',
  'microsoft.windows.camera.multipicker',
  'microsoft.windows.camera.picker',
  'mid',
  'mms',
  'mongodb',
  'moz',
  'moz-extension',
  'ms-access',
  'ms-appinstaller',
  'ms-browser-extension',
  'ms-calculator',
  'ms-drive-to',
  'ms-enrollment',
  'ms-excel',
  'ms-eyecontrolspeech',
  'ms-gamebarservices',
  'ms-gamingoverlay',
  'ms-getoffice',
  'ms-help',
  'ms-infopath',
  'ms-inputapp',
  'ms-lockscreencomponent-config',
  'ms-media-stream-id',
  'ms-meetnow',
  'ms-mixedrealitycapture',
  'ms-mobileplans',
  'ms-newsandinterests',
  'ms-officeapp',
  'ms-people',
  'ms-project',
  'ms-powerpoint',
  'ms-publisher',
  'ms-restoretabcompanion',
  'ms-screenclip',
  'ms-screensketch',
  'ms-search',
  'ms-search-repair',
  'ms-secondary-screen-controller',
  'ms-secondary-screen-setup',
  'ms-settings',
  'ms-settings-airplanemode',
  'ms-settings-bluetooth',
  'ms-settings-camera',
  'ms-settings-cellular',
  'ms-settings-cloudstorage',
  'ms-settings-connectabledevices',
  'ms-settings-displays-topology',
  'ms-settings-emailandaccounts',
  'ms-settings-language',
  'ms-settings-location',
  'ms-settings-lock',
  'ms-settings-nfctransactions',
  'ms-settings-notifications',
  'ms-settings-power',
  'ms-settings-privacy',
  'ms-settings-proximity',
  'ms-settings-screenrotation',
  'ms-settings-wifi',
  'ms-settings-workplace',
  'ms-spd',
  'ms-stickers',
  'ms-sttoverlay',
  'ms-transit-to',
  'ms-useractivityset',
  'ms-virtualtouchpad',
  'ms-visio',
  'ms-walk-to',
  'ms-whiteboard',
  'ms-whiteboard-cmd',
  'ms-word',
  'msnim',
  'msrp',
  'msrps',
  'mss',
  'mt',
  'mtqp',
  'mumble',
  'mupdate',
  'mvn',
  'news',
  'nfs',
  'ni',
  'nih',
  'nntp',
  'notes',
  'num',
  'ocf',
  'oid',
  'onenote',
  'onenote-cmd',
  'opaquelocktoken',
  'openpgp4fpr',
  'otpauth',
  'palm',
  'paparazzi',
  'payment',
  'payto',
  'pkcs11',
  'platform',
  'pop',
  'pres',
  'proxy',
  'pwid',
  'psyc',
  'pttp',
  'qb',
  'query',
  'quic-transport',
  'redis',
  'rediss',
  'reload',
  'res',
  'resource',
  'rmi',
  'rsync',
  'rtmfp',
  'rtmp',
  'rtsp',
  'rtsps',
  'rtspu',
  'sarif',
  'secondlife',
  'secret-token',
  'service',
  'session',
  'sftp',
  'sgn',
  'shc',
  'sieve',
  'simpleledger',
  'simplex',
  'sip',
  'sips',
  'skype',
  'smb',
  'smp',
  'sms',
  'smtp',
  'snmp',
  'soap.beep',
  'soap.beeps',
  'soldat',
  'spiffe',
  'spotify',
  'ssb',
  'ssh',
  'steam',
  'stun',
  'stuns',
  'submit',
  'svn',
  'swh',
  'swid',
  'swidpath',
  'tag',
  'teamspeak',
  'tel',
  'teliaeid',
  'telnet',
  'tftp',
  'things',
  'thismessage',
  'tip',
  'tn3270',
  'tool',
  'turn',
  'turns',
  'tv',
  'udp',
  'unreal',
  'urn',
  'ut2004',
  'uuid-in-package',
  'v-event',
  'vemmi',
  'ventrilo',
  'ves',
  'vnc',
  'view-source',
  'vscode',
  'vscode-insiders',
  'vsls',
  'wcr',
  'webcal',
  'wifi',
  'ws',
  'wss',
  'wtai',
  'wyciwyg',
  'xcon',
  'xcon-userid',
  'xfire',
  'xmlrpc.beep',
  'xmlrpc.beeps',
  'xmpp',
  'xri',
  'ymsgr',
  'z39.50r',
  'z39.50s'
];

export { uriSchemes as default };

/**
 * is URI
 *
 * @param {string} uri - URI
 * @returns {boolean} - result
 */
export const isUri = uri => {
  let res;
  if (isString(uri)) {
    try {
      const { protocol } = new URL(uri);
      const scheme = protocol.replace(/:$/, '');
      const schemeParts = scheme.split('+');
      res = /^(?:ext|web)\+[a-z]+$/.test(scheme) ||
            schemeParts.every(s => uriSchemes.includes(s));
    } catch (e) {
      res = false;
    }
  }
  return !!res;
};

/**
 * sanitize URL
 *
 * @param {string} input - URL input
 * @param {boolean} data - accept 'data' scheme
 * @returns {?string} - sanitized URL
 */
export const sanitizeUrl = (input, data = false) => {
  const HEX = 16;
  let url;
  if (isUri(input)) {
    const { href, protocol } = new URL(input);
    const schemeParts = protocol.replace(/:$/, '').split('+');
    if (data || schemeParts.every(s => s !== 'data')) {
      const amp = encodeURIComponent('&');
      const lt = new RegExp(encodeURIComponent('<'), 'g');
      const gt = new RegExp(encodeURIComponent('>'), 'g');
      const quot = new RegExp(encodeURIComponent('"'), 'g');
      const apos =
        new RegExp(`%${"'".charCodeAt(0).toString(HEX).toUpperCase()}`, 'g');
      url = href.replace(lt, `${amp}lt;`).replace(gt, `${amp}gt;`)
        .replace(quot, `${amp}quot;`).replace(apos, `${amp}#39;`);
    }
  }
  return url || null;
};
